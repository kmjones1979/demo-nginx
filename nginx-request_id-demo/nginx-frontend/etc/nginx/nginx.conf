user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/nginx_global_error.log info;
pid        /var/run/nginx.pid;
events { worker_connections  1024; }

http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  'remote_addr=$remote_addr remote_user=$remote_user [time_local=$time_local] request=$request '
                      'status=$status body_bytes_sent=$body_bytes_sent http_referer=$http_referer args=$args '
                      'http_user_agent=$http_user_agent http_x_forwarded_for=$http_x_forwarded_for '
                      'request_id=$request_id http_x_request_id=$http_x_request_id '
                      'arg_route=$arg_route route=$route http_x_user_route=$http_x_user_route '
                      'auth_true=$auth_true http_x_user_authorized=$http_x_user_authorized ';


    log_format splunk   'application="$server_name" server="$host" port="$server_port" '
                        'client_address="$remote_addr" remote_user="$remote_user" '
                        'time_local="$time_local" request="$request" status="$status" '
                        'bytes_out="$body_bytes_sent" bytes_in="$upstream_response_length" '
                        'http_referer="$http_referer" http_user_agent="$http_user_agent" '
                        'nginx_version="$nginx_version" http_x_forwarded_for="$http_x_forwarded_for" '
                        'http_x_header="$http_x_header" uri_query="$query_string" uri_path="$uri" '
                        'http_method="$request_method" response_time="$upstream_response_time" ';

    # determine if the $request_id needs passed or set
    map $http_x_request_id $request_id_dyn {
        ~[a-z]*[0-9]    $http_x_request_id;
        default         $request_id;
    }

    map $arg_route $route {
        go        go;
        ruby      ruby;
        python    python;
        node      node;
        default   "";
    }

    upstream auth_backend {
        #zone auth_upstream 64k;
        server 45.55.0.168:2001;
    }

    upstream node_backend {
        #zone node_upstream 64k;
        server 45.55.0.168:3001;
    }

    upstream ruby_backend {
        #zone ruby_upstream 64k;
        server 45.55.0.168:4001;
    }

    upstream py_backend {
        #zone py_upstream 64k;
        server 45.55.0.168:5001;
    }

    upstream go_backend {
        #zone go_upstream 64k;
        server 45.55.0.168:6001;
    }

    upstream default_backend {
        #zone default_upstream 64k;
        server 45.55.0.168:7001;
    }

    server {
        #status_zone nginx-frontend;
        listen 80;

        merge_slashes on;

        access_log  /var/log/nginx/global_splunk_access.log  splunk;
        access_log  /var/log/nginx/nginx_frontend_access.log  main;
        error_log  /var/log/nginx/nginx_frontend_error.log info;

        location / {
            auth_request /auth;
            auth_request_set $auth_true $upstream_http_x_user_auth;
            auth_request_set $route_dyn $upstream_http_x_user_route;
            proxy_set_header X-User-Authorized $auth_true;
            proxy_set_header X-Request-ID $request_id_dyn;
            proxy_set_header X-User-Route $route;
            proxy_pass http://127.0.0.1/$arg_route;
        }
        location /auth {
            proxy_set_header Host $host;
            proxy_set_header X-User-Authorized $http_x_user_authorized;
            proxy_set_header X-Request-ID $request_id_dyn;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://auth_backend;
        }
        location /python {
            proxy_set_header Host $host;
            proxy_set_header X-User-Authorized $http_x_user_authorized;
            proxy_set_header X-Request-ID $request_id_dyn;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://py_backend/;
        }
        location /node {
            proxy_set_header Host $host;
            proxy_set_header X-User-Authorized $http_x_user_authorized;
            proxy_set_header X-Request-ID $request_id_dyn;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://node_backend/;
        }
        location /go {
            proxy_set_header Host $host;
            proxy_set_header X-User-Authorized $http_x_user_authorized;
            proxy_set_header X-Request-ID $request_id_dyn;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://go_backend/;
        }
        location /ruby {
            proxy_set_header Host $host;
            proxy_set_header X-User-Authorized $http_x_user_authorized;
            proxy_set_header X-Request-ID $request_id_dyn;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://ruby_backend/;
        }
        location /default {
            proxy_set_header Host $host;
            proxy_set_header X-User-Authorized $http_x_user_authozied;
            proxy_set_header X-Request-ID $request_id_dyn;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://default_backend/;
        }
    }

    server {
        listen 2001;

        access_log  /var/log/nginx/global_splunk_access.log  splunk;
        access_log  /var/log/nginx/nginx_auth_access.log  main;
        error_log  /var/log/nginx/nginx_auth_error.log info;

        location / {
            return 444;
        }

        location /auth {
            return 200 "Access granted!\n";
            add_header X-User-Auth "True" always;
            add_header X-User-Route $route always;
            add_header X-Request-ID $request_id_dyn always;
        }
    }

    server {
        listen 7001;

        access_log  /var/log/nginx/global_splunk_access.log  splunk;
        access_log  /var/log/nginx/nginx_backend_access.log  main;
        error_log  /var/log/nginx/nginx_backend_error.log info;

        location / {
            return 200 "Please specify a route argument.\n
X-User-Authorized: $http_x_user_authorized \n
X-User-Route: $http_x_user_route \n
X-Request-ID: $http_x_request_id \n";
        }
    }

    server {
        listen 8080;

        access_log  /var/log/nginx/global_splunk_access.log  splunk;
        access_log  /var/log/nginx/nginx_status_access.log  main;
        error_log  /var/log/nginx/nginx_status_error.log info;

        location /stub_status {
            stub_status on;
        }
    }

#	server {
#		status_zone status-page;
#
#		listen 8080;
#		root /usr/share/nginx/html;
#		location = /status.html { }
#		location = /status-old.html { }
#		location = / {
#			return 301 /status.html;
#		}
#		location /status {
#			status;
#			status_format json;
#			access_log off;
#		}
#		location /upstream_conf {
#			upstream_conf;
#		}
#	}
}
