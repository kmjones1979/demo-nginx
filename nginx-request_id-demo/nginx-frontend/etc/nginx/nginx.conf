user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;
events { worker_connections  1024; }

http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  'remote_addr: $remote_addr, remote_user: $remote_user [time_local: $time_local] request: "$request" '
                      'status: $status, body_bytes_sent: $body_bytes_sent, http_referer: "$http_referer" '
                      'http_user_agent: "$http_user_agent:", http_x_forwarded_for: "$http_x_forwarded_for" '
                      'request_id: "$request_id"';

    access_log  /var/log/nginx/access.log  main;

    map $dynamic $app {
        node      node;
        python    python;
        default   go;
    }

    upstream auth_backend {
        #zone auth_upstream 64k;
        server 45.55.0.168:6001;
    }

    upstream node_backend {
        #zone node_upstream 64k;
        server 45.55.0.168:3001;
    }

    upstream py_backend {
        #zone py_upstream 64k;
        server 45.55.0.168:5000;
    }

    upstream go_backend {
        #zone go_upstream 64k;
        server 45.55.0.168:7001;
    }

    server {
        #status_zone nginx-frontend;
        listen 80;

        location / {
            auth_request /auth;
            auth_request_set $dynamic $upstream_http_x_user_route;
            proxy_set_header X-User-Route $dynamic;
            proxy_set_header X-Request-ID $request_id;
            proxy_pass http://127.0.0.1/$app;
        }
        location /auth {
            proxy_set_header Host $host;
            proxy_set_header X-Request-ID $http_x_request_id;
            proxy_pass http://auth_backend;
        }
        location /python {
            proxy_set_header Host $host;
            proxy_set_header X-Request-ID $http_x_request_id;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://py_backend/;
        }
        location /node {
            proxy_set_header Host $host;
            proxy_set_header X-Request-ID $http_x_request_id;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://node_backend/;
        }
        location /go {
            proxy_set_header Host $host;
            proxy_set_header X-Request-ID $http_x_request_id;
            proxy_set_header X-User-Route $http_x_user_route;
            proxy_pass http://go_backend/;
        }
    }

    server {
        listen 6001;

        location / {
            return 444;
        }

        location /auth {
            return 200 "Access granted!\n";
            add_header X-User-Route "node" always;
            add_header X-Request-ID $http_x_request_id always;
        }
    }

    server {
        listen 8080;

        location /stub_status {
            stub_status on;
        }
    }

#	server {
#		status_zone status-page;
#
#		listen 8080;
#		root /usr/share/nginx/html;
#		location = /status.html { }
#		location = /status-old.html { }
#		location = / {
#			return 301 /status.html;
#		}
#		location /status {
#			status;
#			status_format json;
#			access_log off;
#		}
#		location /upstream_conf {
#			upstream_conf;
#		}
#	}
}
